const dgram = require('dgram');
const path = require('path'); // Modulo de nodejs para trabajar con rutas
const express = require('express'); // Configurar express
const fs = require('fs'); //  File System module
const {spawn} = require ('child_process');



// Execute python program to control the rehaStym when server starts
const python = spawn('python', ['rehaStym_configuration.py']);

var PLOTSAMPLINGTIME = 35; //ms

/////////////////////
//** UDP Network **//
/////////////////////
// The UDP Network is used to communicate with the CPWalker from
// the user interface (web). The webserver communicates with the
// CPWalker using an UDP Network generated by an ESP32 mounted in
// the robot. The webserver uses several UDP sockets pointing to 
// different PORTS to receive and send data. The main objectives 
// are to configure the therapy settings, move the robot, and 
// receive data comming from the sensors.
// 
// UPD sockets to send data
var udp_send = dgram.createSocket('udp4');
// UDP sockets to receive data
var s_left_knee = dgram.createSocket('udp4');
var s_right_knee = dgram.createSocket('udp4');
var s_left_hip = dgram.createSocket('udp4');
var s_right_hip = dgram.createSocket('udp4');
var s_weight = dgram.createSocket('udp4');
var s_can = dgram.createSocket('udp4');
var s_pos = dgram.createSocket('udp4');
// UDP constants to send data
const CPWALKER_IP = '192.168.4.2';
const LOCAL_IP = 'localhost';
const EXO_PORT = 50011; //Exoskeleton port
const WEIGHT_PORT = 50015; //Patient weight control
const TRACTION_PORT = 50012; //Traction control
const IMPEDANCE_PORT = 50016; //Impedance control

/////////////////////////////////
//** Webserver configuration **//
/////////////////////////////////
// 
// Express initialization
const app = express();
app.set('port', process.env.PORT || 3000)
// Send static files
app.use(express.static(path.join(__dirname, 'public')));
// Configure PORT of the web
const server = app.listen(app.get('port'), () => {
    console.log('Server', app.get('port'));
})

/////////////////////////////////
//** Socket io configuration **//
/////////////////////////////////
// Socket io is the javascript library used for the
// realtime, bi-directional communication between web 
// clients and servers. 
//
// Give the server to socketio
const SocketIO = require('socket.io'); 
const io = SocketIO(server);


////////////////////////////////
//** Database configuration **//
////////////////////////////////
//
var mysql = require('mysql');

////////////////////////////////////
//** Export .xlsx configuration **//
////////////////////////////////////
//
const ExcelJS = require('exceljs');
const { parse } = require('path');




///////////////////
//** CLASSES **//
///////////////////
//
// Class for the FES stimultion points
var stimulationPoints = [];
class stimulationFES {
    constructor(joint, index, trama) {
        this.joint = joint;
        this.index = index;
        this.trama = trama;
    }
}

//////////////////////////////
//***** Data Reception *****//
//////////////////////////////
//
// Receive UDP data from several ports of the ESP32 mounted in CPWalker:
// - port: 10001 -> left knee angles (real position, reference position)
// - port: 10002 -> right knee angles (real position, reference position)
// - port: 10003 -> left hip angles (real position, reference position)
// - port: 10004 -> righ hip angles (real position, reference position)
// - port: 10005 -> Strain gauge wheight
// - port: 10006 -> CAN error
// - port: 10007 -> Position error
//
// Received data format: 
// Joint data: 8 bytes in hexadecimal => [sign_real_pos, interger_real_pos, decimals_1_real_pos, decimals_2_real_pos, sign_ref_pos, interger_ref_pos, decimals_1_ref_pos, decimals_2_ref_pos]
//

// Arrays of recorded therapy data
var record_therapy = false
var time_spam = []
var time_start_therapy = 0;
var left_knee_saved = []; 
var right_knee_saved= []; 
var left_hip_saved= []; 
var right_hip_saved= [];
var left_knee_ref_saved = []; 
var right_knee_ref_saved= []; 
var left_hip_ref_saved= []; 
var right_hip_ref_saved= [];

const hip_trajectory = [36.5585, 36.5259, 36.4962, 36.4689, 36.4408, 36.3909, 36.335, 36.271, 36.1943, 36.0842, 35.9539, 35.8015, 35.6229, 35.3996, 35.1472, 34.8671, 34.5588, 34.2085, 33.8337, 33.4375, 33.021, 32.5716, 32.1055, 31.6253, 31.1309, 30.6092, 30.0759, 29.5333, 28.982, 28.4101, 27.8326, 27.2519, 26.6686, 26.0712, 25.4745, 24.881, 24.2907, 23.6928, 23.0991, 22.5103, 21.9251, 21.3314, 20.7416, 20.1566, 19.576, 18.9904, 18.4092, 17.8328, 17.26, 16.6806, 16.1042, 15.5317, 14.9625, 14.3888, 13.8194, 13.2551, 12.6957, 12.1344, 11.5788, 11.0296, 10.4863, 9.943, 9.4059, 8.8751, 8.35, 7.8256, 7.307, 6.7943, 6.2873, 5.782, 5.2825, 4.789, 4.3013, 3.8162, 3.3365, 2.8623, 2.3931, 1.9264, 1.4649, 1.0089, 0.55876, 0.11339, -0.32492, -0.75545, -1.1777, -1.592, -1.9966, -2.3906, -2.7733, -3.1449, -3.503, -3.8462, -4.1732, -4.483, -4.7732, -5.0422, -5.2883, -5.5107, -5.7056, -5.8703, -6.0025, -6.1013, -6.1635, -6.1873, -6.1715, -6.117, -6.0199, -5.8784, -5.691, -5.4588, -5.1776, -4.8459, -4.4624, -4.0296, -3.5434, -3.0028, -2.408, -1.7637, -1.0667, -0.31824, 0.47919, 1.3179, 2.1989, 3.1186, 4.0724, 5.0499, 6.0517, 7.0737, 8.1109, 9.1527, 10.2008, 11.2518, 12.3017, 13.3403, 14.3718, 15.3946, 16.4062, 17.397, 18.3728, 19.3328, 20.2749, 21.189, 22.0824, 22.9548, 23.805, 24.6222, 25.4163, 26.1884, 26.9377, 27.6538, 28.3466, 29.0165, 29.6621, 30.2707, 30.8549, 31.416, 31.9538, 32.4557, 32.9354, 33.3942, 33.8315, 34.2332, 34.613, 34.9714, 35.3072, 35.6047, 35.8803, 36.136, 36.3716, 36.5725, 36.7541, 36.9172, 37.0604, 37.1663, 37.2525, 37.3207, 37.3704, 37.3856, 37.3845, 37.3695, 37.3407, 37.2817, 37.2124, 37.1364, 37.0547, 36.9514, 36.8478, 36.7477, 36.6527, 36.5465, 36.4502, 36.367, 36.2969, 36.2222, 36.1618, 36.1168, 36.085, 36.046, 36.0174, 35.9986, 35.9863];
const knee_trajectory = [6.1418, 6.7972, 7.4686, 8.1689, 8.9067, 9.6842, 10.4966, 11.3337, 12.182, 13.0189, 13.8396, 14.6336, 15.3915, 16.1046, 16.7657, 17.3684, 17.9076, 18.3745, 18.7741, 19.1077, 19.3771, 19.5806, 19.725, 19.8135, 19.8487, 19.828, 19.7606, 19.6507, 19.5023, 19.3141, 19.0962, 18.8534, 18.5896, 18.303, 18.0026, 17.692, 17.3728, 17.0405, 16.7037, 16.3641, 16.0224, 15.6729, 15.3231, 14.9743, 14.6265, 14.2733, 13.9225, 13.5755, 13.2325, 12.8872, 12.5471, 12.213, 11.885, 11.5564, 11.2348, 10.9213, 10.6157, 10.3121, 10.0171, 9.7313, 9.4541, 9.1793, 8.9136, 8.6575, 8.4108, 8.1681, 7.9356, 7.7143, 7.5041, 7.2999, 7.108, 6.9295, 6.7647, 6.6084, 6.4679, 6.3452, 6.2412, 6.1513, 6.0831, 6.0383, 6.018, 6.0166, 6.0428, 6.0985, 6.185, 6.2962, 6.4408, 6.6206, 6.8362, 7.0798, 7.3613, 7.6824, 8.0437, 8.4363, 8.8715, 9.3514, 9.8765, 10.4366, 11.0446, 11.7028, 12.4117, 13.1596, 13.9608, 14.8179, 15.7311, 16.6869, 17.701, 18.7756, 19.9101, 21.0885, 22.3263, 23.6239, 24.9787, 26.3711, 27.8151, 29.3086, 30.8466, 32.4058, 33.9996, 35.624, 37.2719, 38.9172, 40.5709, 42.2259, 43.8718, 45.4793, 47.0568, 48.5956, 50.0841, 51.4928, 52.8325, 54.0975, 55.2796, 56.3539, 57.3346, 58.2194, 59.0042, 59.6669, 60.2264, 60.6839, 61.0388, 61.2726, 61.407, 61.4458, 61.3902, 61.2232, 60.9669, 60.6248, 60.1978, 59.6684, 59.0586, 58.3722, 57.6101, 56.7555, 55.8304, 54.839, 53.7822, 52.6441, 51.4464, 50.193, 48.8851, 47.5074, 46.0817, 44.6124, 43.1012, 41.5343, 39.9329, 38.3016, 36.6427, 34.943, 33.2247, 31.4935, 29.753, 27.9924, 26.2345, 24.4865, 22.7541, 21.028, 19.3339, 17.6818, 16.0799, 14.5222, 13.0349, 11.629, 10.3133, 9.0819, 7.9609, 6.9607, 6.0887, 5.3415, 4.7328, 4.2657, 3.9404, 3.7431, 3.6892, 3.7775, 4.0008, 4.3424, 4.7836, 5.2959, 5.8453];
var left_knee_real; // Real value of the knee angular position
var left_knee_ref; // Reference value (setpoint)
var right_knee_real; // Real value of the knee angular position
var right_knee_ref; // Reference value (setpoint)
var left_hip_real; // Real value of the hip angular position
var left_hip_ref; // Reference value (setpoint)
var right_hip_real; // Real value of the hip angular position
var right_hip_ref; // Reference value (setpoint)
// Left knee data
s_left_knee.on('message', function(msg, info) {
    [left_knee_real, left_knee_ref] = decodeRealRef(msg);
    if (record_therapy) {
        left_knee_saved.push(parseFloat(left_knee_real))
        left_knee_ref_saved.push(parseFloat(left_knee_ref))
        var d = new Date();
        time_spam.push(d.getTime() - time_start_therapy)
    }
});
// Right knee data
s_right_knee.on('message', function(msg, info) {
    [right_knee_real, right_knee_ref] = decodeRealRef(msg);
    if (record_therapy) {
        right_knee_saved.push(parseFloat(right_knee_real))
        right_knee_ref_saved.push(parseFloat(right_knee_ref))
    }
});
// Left hip data
s_left_hip.on('message', function(msg, info) {
    [left_hip_real, left_hip_ref] = decodeRealRef(msg);
    if (record_therapy) {
        left_hip_saved.push(parseFloat(left_hip_real))
        left_hip_ref_saved.push(parseFloat(left_hip_ref))
    }
});
// Right hip data
s_right_hip.on('message', function(msg, info) {
    [right_hip_real, right_hip_ref] = decodeRealRef(msg);
    if (record_therapy) {
        right_hip_saved.push(parseFloat(right_hip_real))
        right_hip_ref_saved.push(parseFloat(right_hip_ref))
    }
});
//TODO
s_weight.on('message', function(msg, info) {
});
//TODO
s_can.on('message', function(msg, info) {
});
//TODO
s_pos.on('message', function(msg, info) {
});
// Bind the UDP ports
s_left_knee.bind(10001); 
s_right_knee.bind(10002); 
s_left_hip.bind(10003); 
s_right_hip.bind(10004); 
s_weight.bind(10005); 
s_can.bind(10006);
s_pos.bind(10007);



setInterval(function () {
    var element
    for (let i = 0; i < stimulationPoints.length; i++) {
        element = stimulationPoints[i]
        if (element.joint == "l_hip" && ( hip_trajectory[element.index] > (left_hip_ref - 2) && (hip_trajectory[element.index] < (left_hip_ref + 2)))) {
            sendUDP(element.trama,6000,LOCAL_IP);
        } else {
            //TODO: Send the 0 current of that configuration
        }
        if (element.joint == "r_hip" && (hip_trajectory[element.index] > (right_hip_ref - 2) && (hip_trajectory[element.index] < (right_hip_ref + 2)))){
            sendUDP(element.trama,6000,LOCAL_IP);
        } else {
            //TODO: Send the 0 current of that configuration
        }
        if (element.joint == "r_knee" && (knee_trajectory[element.index] > (right_knee_ref - 2) && (knee_trajectory[element.index] < (right_knee_ref + 2)))){
            sendUDP(element.trama,6000,LOCAL_IP);
        } else {
            //TODO: Send the 0 current of that configuration
        }
        if (element.joint == "l_knee" && (knee_trajectory[element.index] > (left_knee_ref - 2) && (knee_trajectory[element.index] < (left_knee_ref + 2)))){
            sendUDP(element.trama,6000,LOCAL_IP);
        } else {
            //TODO: Send the 0 current of that configuration
        }    
    }
}, 10);

///////////////////////////////////////
//*** Server-Client communication ***//
///////////////////////////////////////
//
//Connect with DataBase CPW_DB
var con = mysql.createConnection({
host: "localhost",
user: "root",
password: "mysql",
database: "cpwdb",
multipleStatements: true
});
// Websockets
io.on('connection', (socket) => {
    console.log('new connection', socket.id);
    resetTexas();
    var datitos=[];

    //
    socket.on('refreshlist',function() {
        console.log("Connected!");
        console.log("Connected Sessions!");
        var sql = "SELECT * FROM tabla_sesion JOIN tabla_pacientes ON tabla_sesion.idPaciente = tabla_pacientes.idtabla_pacientes JOIN tabla_terapeutas ON tabla_sesion.idTerapeuta = tabla_terapeutas.idtabla_terapeutas";
        con.query(sql, function (err, sessions_data) {
            if (err) throw err;
            socket.emit('datostabla', sessions_data);   //session_data---- datos de las sesiones (configuraciones)
        });
        console.log("Connected Patient!");
        var sql = "SELECT * FROM tabla_pacientes";
        con.query(sql, function (err, patients_list) {
            if (err) throw err;
            socket.emit('patientdata', patients_list);  //patients_list ----- lista de pacientes(id-nombre-apellido)
        });
        console.log("Connected Therapist!");
        var sql = "SELECT * FROM tabla_terapeutas";
        con.query(sql, function (err, therapist_list) {
            if (err) throw err;
            socket.emit('therapistdata', therapist_list);     //therapist_list ---- Lista de Terapeutas, id-nombre-apellido-centro
        });          
    })

    //DELET PATIENT DATABASE
    socket.on('deleted_patient', function(iddeleted) {
        var sql = "DELETE FROM tabla_pacientes WHERE idtabla_pacientes="+iddeleted;
        con.query(sql, function (err, result) {
            console.log("Delet Patient");
        });
    });

    //EDIT PATIENT DATABASE
    socket.on('edit_patient', function(editpat) {
        var sql = 'UPDATE tabla_pacientes SET NombrePaciente = ?, ApellidoPaciente = ?  WHERE (idtabla_pacientes=?)'
        con.query(sql,[editpat.NombrePaciente,editpat.ApellidoPaciente,editpat.idtabla_pacientes], function (err, result) {
            console.log("Edited Patient");
        });
    });
    // ADD PATIENT IN DATABASE
    socket.on('insertPatient', function(patient) {
        var sql = "INSERT INTO tabla_pacientes (NombrePaciente, ApellidoPaciente) VALUES (?)";
        con.query(sql,[patient], function (err, result) {
            if (err) throw err;
            console.log("1 record Patient");
        });
    });

    //DOWNLOAD PATIENT LIST (DATABASE)
    socket.on('download_patients',function(res){
        const workbook = new ExcelJS.Workbook();
        const worksheet = workbook.addWorksheet('My Sheet');
        worksheet.columns = [
            { header: 'Id Patient', key: 'idtabla_pacientes', width: 10 },
            { header: 'First Name', key: 'NombrePaciente', width: 10 },
            { header: 'Last Name', key: 'ApellidoPaciente', width: 10 }
        ];
        var sql = "SELECT * FROM tabla_pacientes";
        con.query(sql, function (err, patients_list) {
            if (err) throw err;
            datitos=patients_list;
            //console.log(datitos);
                for (var i = 0; i < patients_list.length; i++) {
                    worksheet.addRow((patients_list[i]));
                }   
            workbook.xlsx.writeFile("Patients_DB.xlsx");
        });     
    })
    app.get('/downloadpatients', (req, res) => setTimeout(function(){ res.download('./Patients_DB.xlsx'); }, 100))


    
    // ADD THERAPIST IN DATABASE
    socket.on('insertTherapist', function(therapist) {
        var sql = "INSERT INTO tabla_terapeutas (NombreTerapeuta, ApellidoTerapeuta, Centro) VALUES (?)";
        con.query(sql,[therapist], function (err, result) {
            if (err) throw err;
            console.log("1 record Therapist");
        });
    });

    //EDIT THERAPIST DATABASE
    socket.on('edit_therapist', function(editpat) {
        var sql = 'UPDATE tabla_terapeutas SET NombreTerapeuta = ?, ApellidoTerapeuta = ?, Centro = ?  WHERE (idtabla_terapeutas=?)'
        con.query(sql,[editpat.NombreTerapeuta,editpat.ApellidoTerapeuta, editpat.Centro,editpat.idtabla_terapeutas], function (err, result) {
            console.log("Edited therapist");
        });
    });

    //DELET THERAPIST DATABASE
    socket.on('deleted_therapist', function(iddeleted) {
        var sql = "DELETE FROM tabla_terapeutas WHERE idtabla_terapeutas="+iddeleted;
        con.query(sql, function (err, result) {
            console.log("Delet Therapist");
        });
    });  

    //DOWNLOAD PATIENT LIST (DATABASE)
    socket.on('download_therapist',function(res){
        const workbook = new ExcelJS.Workbook();
        const worksheet = workbook.addWorksheet('Therapists');
        worksheet.columns = [
            { header: 'Id Therapist', key: 'idtabla_terapeutas', width: 10 },
            { header: 'First Name', key: 'NombreTerapeuta', width: 10 },
            { header: 'Last Name', key: 'ApellidoTerapeuta', width: 10 }
        ];
        var sql = "SELECT * FROM tabla_terapeutas";
        con.query(sql, function (err, therapist_list) {
            if (err) throw err;
                for (var i = 0; i < therapist_list.length; i++) {
                    worksheet.addRow((therapist_list[i]));
                }   
            workbook.xlsx.writeFile("Therapists_DB.xlsx");
        });     
    })

    // ADD SESSIONS DATA IN DATABASE
    socket.on('addsesiondata', function(data) {
        console.log("Add session data")
        var sql = "INSERT INTO tabla_sesion (idPaciente, NumberSession, idTerapeuta, patiente_age, patiente_weight, leg_length, hip_upper_strap, knee_lower_strap, gait_velocity, gmfcs, steps, ROM, PBWS, control_mode, right_knee_config, left_knee_config, right_hip_config, left_hip_config, observations) VALUES (?)";
        // Read therapy configuration from conf file
        fs.readFile('/home/pi/CPWalker/cpwalker-interface/config/therapySettings.json', (err, data) => {
        //fs.readFile('config/therapySettings.json', (err, data) => {
            if (err) throw err;
            var config = JSON.parse(data);
            var terapist_id = "SELECT idtabla_terapeutas from tabla_terapeutas where NombreTerapeuta in ('" + (config.therapist_name.split(" "))[0] +"') AND ApellidoTerapeuta in ('" + (config.therapist_name.split(" "))[1] +"'); ";
            var patient_id = "SELECT idtabla_pacientes from tabla_pacientes where NombrePaciente in ('" + (config.patient_name.split(" "))[0] +"') AND ApellidoPaciente in ('" + (config.patient_name.split(" "))[1] +"'); ";
            var IDs = terapist_id + patient_id
            con.query(IDs , [1,2], function (err, result) {
                if (err) throw err;
                terapist_id = result[0][0].idtabla_terapeutas
                patient_id = result[1][0].idtabla_pacientes
                var sessionConfig = [patient_id, 1, terapist_id, config.patient_age, config.weight, config.leg_length, config.hip_upper_strap,  config.knee_lower_strap, config.gait_velocity, config.gmfcs, config.steps, config.rom, config.pbws, config.control_mode, config.right_knee_config, config.left_knee_config, config.right_hip_config, config.left_knee_config, config.observations];
                con.query(sql,[sessionConfig], function (err, result) {
                    if (err) throw err;
                    console.log("Recorded Session");
                    // Save Data of the session
                    var sessionID = "SELECT idtable_session from tabla_sesion ORDER BY idtable_session DESC LIMIT 1;";
                    con.query(sessionID , function (err, sessionID) {
                        if (err) throw err;
                        // Get last session ID
                        console.log(sessionID)
                        sessionID = sessionID[0].idtable_session
                        console.log(sessionID)
                        // Prepare joints angles data of the last session
                        var insertDataRows = ""
                        for (let index = 0; index < right_hip_saved.length; index++) {
                            insertDataRows = "(" + (sessionID).toString() + "," + (time_spam[index]).toString() +","+ (left_knee_ref_saved[index]).toString() + "," + (left_knee_saved[index]).toString() + "," + (right_knee_ref_saved[index]).toString() + "," + (right_knee_saved[index]).toString() + "," + (left_hip_ref_saved[index]).toString() + "," + (left_hip_saved[index]).toString() + "," + (right_hip_ref_saved[index]).toString() + "," + (right_hip_saved[index]).toString() + ");"             
                            var sql = "INSERT INTO data_sessions (idSesion, Date, left_knee_goal, left_knee, right_knee_goal, right_knee, left_hip_goal, left_hip, right_hip_goal, right_hip) VALUES " + insertDataRows;
                            con.query(sql, function (err, result) {
                                if (err) throw err;
                            });
                        }
                        console.log("Recorded Session Data");
                    }); 
                });
            }); 
        
        })
    });

    //DELET SESSION FROM DATABASE
    socket.on('deleted_session', function(iddeleted) {
        var sql_sessions = "DELETE FROM tabla_sesion WHERE idtable_session="+iddeleted;
        var sql_data = "DELETE FROM data_sessions WHERE idSesion="+iddeleted;
        con.query(sql_sessions, function (err, result) {
            console.log("Delet Session");
        });
        con.query(sql_data, function (err, result) {
            console.log("Delet Data Session");
        });
    });  

    //DOWNLOAD SESSIONS CONFIGURATION (DATABASE)
    socket.on('download_sessions_config',function(res){
        const workbook = new ExcelJS.Workbook();
        const worksheet = workbook.addWorksheet('Session');
        worksheet.columns = [
            { header: 'Id Session', key: 'idtable_session', width: 20 },
            { header: 'Date', key: 'Date', width: 10 },
            { header: 'Id Patient', key: 'idPaciente', width: 20 },
            { header: 'Number of session', key: 'NumberSession', width: 30 },
            { header: 'Id Therapist', key: 'idTerapeuta', width: 20 },
            { header: 'Patient Age', key: 'patient_age', width: 20 },
            { header: 'Patient Weight', key: 'patient_weight', width: 30 },
            { header: 'Leg Length', key: 'leg_length', width: 20 },
            { header: 'Hip upper strap', key: 'hip_upper_strap', width: 30 },
            { header: 'Knee lower strap', key: 'knee_lower_strap', width: 30 },
            { header: 'Gait Velocity', key: 'gait_velocity', width: 20 },
            { header: 'GMFCS', key: 'gmfcs', width: 10 },
            { header: 'Steps', key: 'steps', width: 10 },
            { header: 'PBWS', key: 'pbws', width: 10 },
            { header: 'ROM', key: 'rom', width: 10 },
            { header: 'Control Mode', key: 'control_mode', width: 20 },
            { header: 'Left Hip', key: 'left_hip_config', width: 20 },
            { header: 'Right Hip', key: 'right_hip_config', width: 20 },
            { header: 'Left Knee', key: 'left_knee_config', width: 20 },
            { header: 'Right Knee', key: 'right_knee_config', width: 20 },
            { header: 'Observations', key: 'observations', width: 100 }
        ];
        var sql = "SELECT * FROM tabla_sesion";
        con.query(sql, function (err, sessions_data) {
            if (err) throw err;
                for (var i = 0; i < sessions_data.length; i++) {
                    worksheet.addRow((sessions_data[i]));
                }   
            workbook.xlsx.writeFile("Sessions_Configurations_DB.xlsx");
        });     
    })


    //DOWNLOAD SESSION DATA (DATABASE)
    socket.on('download_sessions_data',function( idsesion){
        console.log("Download Data")
        console.log(idsesion)
        const workbook = new ExcelJS.Workbook();
        const worksheet = workbook.addWorksheet('Session');
        worksheet.columns = [
            { header: 'Id Data', key: 'iddata_Sessions', width: 10 },
            { header: 'Id Sesion', key: 'idSesion', width: 10 },
            { header: 'Time (ms)', key: 'Date', width: 10 },
            { header: 'Left Hip Reference', key: 'left_hip_goal', width: 20 },
            { header: 'Left Hip Real', key: 'left_hip', width: 10 },
            { header: 'Left Hip Force', key: 'left_hip_force', width: 20 },
            { header: 'Right Hip Reference', key: 'right_hip_goal', width: 20 },
            { header: 'Right Hip Real', key: 'right_hip', width: 10 },
            { header: 'Right Hip Force', key: 'right_hip_force', width: 20 },
            { header: 'Left Knee Reference', key: 'left_knee_goal', width: 20 },
            { header: 'Left Knee Real', key: 'left_knee', width: 10 },
            { header: 'Left Knee Force', key: 'left_knee_force', width: 20 },
            { header: 'Right Knee Reference', key: 'right_knee_goal', width: 20 },
            { header: 'Right Knee Real', key: 'right_knee', width: 10 },
            { header: 'Right Knee Force', key: 'right_knee_froce', width: 20 },
            { header: 'Weigth Gauge', key: 'weight_gauge', width: 20 }
        ];
        var sql = "SELECT * FROM data_sessions WHERE idSesion=" + idsesion.toString() + ";";
        con.query(sql, function (err, sessions_data) {
            if (err) throw err;
                for (var i = 0; i < sessions_data.length; i++) {
                    worksheet.addRow((sessions_data[i]));
                }   
            workbook.xlsx.writeFile("Sessions_Data_DB.xlsx");
        });     
    })

    app.get('/downloadsessionsconfig', (req, res) => setTimeout(function(){ res.download('./Sessions_Configurations_DB.xlsx'); }, 100))
    app.get('/downloadsessionsdata', (req, res) => setTimeout(function(){ res.download('./Sessions_Data_DB.xlsx'); }, 100))

    app.get('/downloadtherapists', (req, res) => setTimeout(function(){ res.download('./Therapists_DB.xlsx'); }, 100))

    // Move the platform manualy. Listen traction:message events 
    // and send UDP data to the platform (called in move.js)
    socket.on('traction:message', (data) => {
        moveManually(data);
    })

    // Send data to the charts in therapy monitoring
    setInterval(function () {
        socket.emit('monitoring:jointData', {
            right_hip_real: right_hip_real,
            right_hip_ref: right_hip_ref,
            left_hip_real: left_hip_real,
            left_hip_ref: left_hip_ref,
            right_knee_real: right_knee_real,
            right_knee_ref: right_knee_ref,
            left_knee_real: left_knee_real,
            left_knee_ref: left_knee_ref
        })
    }, PLOTSAMPLINGTIME);
    
    // Save therapy settings in a JSON file.
    socket.on('settings:save_settings', (data) => { 
        fs.writeFileSync('/home/pi/CPWalker/cpwalker-interface/config/therapySettings.json', JSON.stringify(data), function (err){
        //fs.writeFileSync('config/therapySettings.json', JSON.stringify(data), function (err){
            if (err) throw err;
            console.log('Therapy settings saved!')
        })
    })

    // Show therapy settings in the monitoring screen.
    socket.on('monitoring:ask_therapy_settings', function(callbackFn) {
        // Read therappy settings from config file.
        fs.readFile('/home/pi/CPWalker/cpwalker-interface/config/therapySettings.json', (err, data) => {
        //fs.readFile('config/therapySettings.json', (err, data) => {
            if (err) throw err;
            let config = JSON.parse(data);
            console.log(config);
            // Send values
            socket.emit('monitoring:show_therapy_settings', {
                patient_name : config.patient_name,
                gmfcs :  config.gmfcs,
                gait_velocity :   config.gait_velocity,
                rom :   config.rom,
                pbws :   config.pbws,
                steps :   config.steps,
                control_mode :   config.control_mode,
                left_hip_config :   config.left_hip_config,
                left_knee_config :   config.left_knee_config,
                right_hip_config :   config.right_hip_config,
                right_knee_config :   config.right_knee_config
            })
        });
    });

    // Update joint chart plots.
    socket.on('monitoring:jointData_ask', function(callbackFn) {
        socket.emit('monitoring:jointData_resp', {
            right_hip_real: right_hip_real,
            right_hip_ref: right_hip_ref,
            left_hip_real: left_hip_real,
            left_hip_ref: left_hip_ref,
            right_knee_real: right_knee_real,
            right_knee_ref: right_knee_ref,
            left_knee_real: left_knee_real,
            left_knee_ref: left_knee_ref
        })
    });

    socket.on('deleted_patient', function(iddeleted) {
        console.log(iddeleted);
        var con = mysql.createConnection({
            host: "localhost",
            user: "root",
            password: "mysql",
            database: "cpwdb",
            multipleStatements: true
          });
            con.connect(function(err) {
                if (err) throw err;
                console.log("Eliminado");
                //var sql = "SELECT * FROM tabla_sesion JOIN tabla_pacientes ON tabla_sesion.idPaciente = tabla_pacientes.idtabla_pacientes JOIN tabla_terapeutas ON tabla_sesion.idTerapeuta = tabla_terapeutas.idtabla_terapeutas";
               // con.query(sql, function (err, result) {
                //  if (err) throw err;
                  //console.log(result);
                //  socket.emit('datostabla', result);
               // });
    
            });
    });

    //INSERTAR PACIENTE QUE SE TRAE DESDE LA WEB HACIA LA BASE DE DATOS.
    socket.on('insertPatient', function(patient) {
        console.log(patient);
        var con = mysql.createConnection({
            host: "localhost",
            user: "root",
            password: "mysql",
            database: "cpwdb",
            multipleStatements: true
          });
            con.connect(function(err) {
                if (err) throw err;
                console.log("Agregado");
                console.log(patient[0]);
                console.log(patient[1]);
                var sql = "INSERT INTO tabla_pacientes (NombrePaciente, ApellidoPaciente) VALUES (?)";
                con.query(sql,[patient], function (err, result) {
                  if (err) throw err;
                  console.log("1 record inserted");
                //  socket.emit('datostabla', result);
                });
    
            });
    }); 

    // Configure the robot.
    socket.on('monitoring:configure_robot', function(callbackFn) {
        configureStartPos();
    });

    // Start therapy.
    socket.on('monitoring:start', function(callbackFn) {
        startTherapy();
        // Start saving joints angles
        record_therapy = true
        left_hip_saved = []
        left_hip_ref_saved= []
        right_hip_saved = []
        right_hip_ref_saved= []
        left_knee_saved = []
        left_knee_ref_saved= []
        right_knee_saved = []
        right_knee_ref_saved= []
        var d = new Date();
        time_start_therapy = d.getTime()
    });

    // Stop therapy.
    socket.on('monitoring:stop', function(callbackFn) {
        stopTherapy();
        record_therapy = false
        console.log(right_hip_saved)
        console.log(left_hip_saved.length)
        console.log(right_knee_saved.length)
        console.log(left_knee_saved.length)
    });

    // Update joint chart plots.
    socket.on('FES:configuration', function(data) {
        //console.log(data.channels, data.current, data.pw, data.main_freq, data.group_time, data.mode)
        var [trama_init, trama_update, trama_stop]  =  configFES(data.channels, data.current, data.pw, data.main_freq, data.group_time, data.mode);;
        console.log(trama_init)
        console.log(trama_update)
        console.log(trama_stop)
        if (data.configuration == "test") {
            sendUDP(trama_init.concat(trama_update),6000,LOCAL_IP);
            (async () => {
                await new Promise(resolve => setTimeout(resolve, 50));        
            })();       
        } else {
            stimulationPoints.push(new stimulationFES(data.configuration, data.index, trama_init, trama_update, trama_stop));
            console.log(stimulationPoints)
            socket.emit('FES:stimulation_points', {
                stimulationPoints: stimulationPoints
            })
        }
            
    });

    socket.on('reconnect', function(err) {
        resetTexas();
    });
})

///////////////////
//** FUNCTIONS **//
///////////////////
//
// Move manually the robotic platform 
function resetTexas() {
    sendUDP(255,9999,CPWALKER_IP);
}

function configFES (channels_Stim, current, pw ,main_freq, group_time, mode) {   
    // channels_Stim: Stimulator channels to be sued (example:'00100011' // Canales activos, segun orden descendente:1 (tibial), 2(Gastrocnemios) y 5 (Cuádriceps))    
    // current: Stimulation Current [mA]
    // pw: Pulse width [us]
    // main_freq: Attendance frequency [hz]
    // group_time: Attendance frequency between groups
    // mode: Mode of assistance (single pulses, doublets and triplets)   

    // Channels list:
    var channels_Stim_dec = parseInt(channels_Stim,2); 

    // Channels Low Frequency: (defines the low frequency channels)
    var channels_Lf = '0000000';
    var channels_Lf_dec = parseInt(channels_Lf, 2);

    // N Factor: How many times the stimulation is skipped for channels specified in Channel_Lf and Channel_Stim
    // 0 = no skip
    // 1 = skip once
    // 7 = skip seven times
    var n_factor_dec = 0;
    var n_factor_bin = binaryResize(n_factor_dec.toString(2),3)
    console.log(n_factor_bin)

    // Main frequency
    // From RehaStim datasheet (size 11 bits): main_time = (ts1 + 1) / 0.5 // Main period ts1 in (ms)
    main_time_dec = (Math.abs((1/parseInt(main_freq))*1000) - 1)/.5;
    main_time_bin = parseInt(main_time_dec,10).toString(2); 
    main_time_bin = binaryResize (main_time_bin, 11)

    // Group frequency
    // From RehaStim datasheet (size 5 bits): group_time = (ts2 - 1.5) / 0.5 // In (ms)
    group_time_dec = parseInt(group_time);
    group_time_bin = parseInt(group_time_dec).toString(2); // Conver to binary
    group_time_bin = binaryResize (group_time_bin, 5); // Resize binary number

    // Mode:
    // 0 = single pulse
    // 1 = doublet 
    // 2 = triplet
    mode = parseInt(mode);
    mode_bin = binaryResize(mode.toString(2), 2)

    // Pulse width
	pw = parseInt(pw);
    pw_bin=binaryResize(pw.toString(2),9) 

    // Current:
    // Current in mA
    current = parseInt(current);
    current_bin = binaryResize(current.toString(2), 7)

    // Control modes
    // Ident == '00' (Channel list Initialization mode)
    // Ident == '01' (Channel list Update mode)
    // Ident == '10' (Channel list Stop mode)
    // Ident == '11' (Single Pulse Generator mode)
    //    
    // Channel list Initialization Command (ccl_init):
    var Ident = '00';
    var check_init =  binaryResize(parseInt((channels_Stim_dec + channels_Lf_dec + group_time_dec + main_time_dec) % 8).toString(2),3); // Datasheet formula
    var byte_1 = ('1' + Ident + check_init + n_factor_bin.substr(0,2)); 
    var byte_1_dec =  parseInt(byte_1, 2);
    var byte_2 = '0' + n_factor_bin.charAt(2) + channels_Stim.substring(0,6)
    var byte_2_dec = parseInt(byte_2, 2);
    var byte_3 = '0' + channels_Stim.substring(6,8) + channels_Lf.substring(0,5)
    var byte_3_dec = parseInt(byte_3, 2);
    var byte_4 = '0' + channels_Lf.substring(5,8) + '00' + group_time_bin.substring(0,2)
    var byte_4_dec = parseInt(byte_4, 2);
    var byte_5 = '0' + group_time_bin.substring(2,5) + main_time_bin.substring(0, 4)
    var byte_5_dec = parseInt(byte_5, 2);
    var byte_6 = '0' + main_time_bin.substring(4,11)
    var byte_6_dec = parseInt(byte_6, 2);
    var ccl_init = [byte_1_dec, byte_2_dec, byte_3_dec, byte_4_dec, byte_5_dec, byte_6_dec]
    //
    // Channel list Update Command (ccl_update):
    var Ident = '01';
    var check_update = binaryResize(parseInt((mode + pw + current) % 32).toString(2), 5);
    var byte_1 = '1' + Ident + check_update; 
    var byte_1_dec =  parseInt(byte_1, 2);
    var byte_2 = '0' + mode_bin + '000' + pw_bin.substring(0,2)
    var byte_2_dec = parseInt(byte_2, 2);
    var byte_3 = '0' + pw_bin.substring(2,9)
    var byte_3_dec = parseInt(byte_3, 2);
    var byte_4 = '0' + current_bin
    var byte_4_dec = parseInt(byte_4, 2);
    var ccl_update = [byte_1_dec, byte_2_dec, byte_3_dec, byte_4_dec]
    crc_update_bin = '101' + binaryResize(((pw + current + mode) % 32).toString(2), 5);
    crc_update = parseInt(crc_update_bin, 2);
    //
    // Channel list Stop Command (ccl_stop):
    var Ident = '10';
    var check_stop = binaryResize(parseInt(0).toString(2), 5);
    var byte_1 = '1' + Ident + check_stop; 
    var byte_1_dec =  parseInt(byte_1, 2);
    var ccl_stop = [byte_1_dec]
    
    // Final command generation:
    trama = ccl_init.concat(ccl_update);
    return [ccl_init, ccl_update_active, ccl_stop];
}

function binaryResize (data, size) {
    var dataResized = '';
    for (let index = 0; index <= size; index++) {
        if (index <= data.length) {
            dataResized = dataResized + data.charAt(index);
        } else {
            dataResized = '0' + dataResized;
        }
    }
    return dataResized;
}
function moveManually(data) {
    //Get values 
    w_r = data.w_right;
    w_l = data.w_left;
    //Command variables 
    var cmd_start;
    var cmd_v_l;
    var cmd_v_r;
    var cmd_traction_mode;
    //Commands transformation:
    cmd_start = 0; 
    cmd_v_r = Math.round(50 * (1 + w_r/100));
    cmd_v_l = Math.round(50 * (1 + w_l/100));
    if (w_r === 0 && w_l === 0) {
        cmd_traction_mode = 0;  //0 -> STOP
    } else {
        cmd_traction_mode = 10; //10 -> Manual control
    }
    var trac_manual = [cmd_start, cmd_v_l, cmd_v_r, cmd_traction_mode];
    // Send UDP Mesage:
    stopExo();
    (async () => {
        await new Promise(resolve => setTimeout(resolve, 50));        
    })();
    sendUDP(trac_manual, TRACTION_PORT, CPWALKER_IP);
}

// Configure robot with the therapy settings and move to start position.  
function configureStartPos() {
    console.log("Configure and move to start pos");
    var exo_config = [];
    // Traction control variabels
    var trac_config = [];
    var cmd_start;
    var cmd_v_r;
    var cmd_v_l;
    var cmd_traction_mode;
    // Weight support variabels
    var weight_conf = [];
    var calibrate;
    var pat_weight
    var pbws;
    // Get therapy settings from json file
    fs.readFile('/home/pi/CPWalker/cpwalker-interface/config/therapySettings.json', (err, data) => {
    //fs.readFile('config/therapySettings.json', (err, data) => {
        if (err) throw err;
        // Get json object
        let config = JSON.parse(data);
        // Traction control config and initial position
        cmd_start = 150; // Exoskeleton goes to initial position
        cmd_v_r = 50; // Velocity of right wheel 0 
        cmd_v_l = 50; // Velocity of left wheel 0
        cmd_traction_mode = 0;
        trac_config = [cmd_start, cmd_v_l, cmd_v_r, cmd_traction_mode];
        // Weight support config
        calibrate = 1;
        pat_weight = parseInt(config.weight);
        pbws =  parseInt(config.pbws);
        weight_conf = [calibrate, pat_weight, pbws, 0];
        // Exoskeleton config and move to initial position.
        exo_config = [0,0,0,0,0,0,0,0];
        // Encode selected joints.
        var joints = [0,0,0,0]
        if (config.right_hip_config == "enable") {
            joints[0] = 1;
        }
        if (config.left_hip_config == "enable") {
            joints[1] = 1;
        }
        if (config.right_knee_config == "enable") {
            joints[2] = 1;
        }
        if (config.left_knee_config == "enable") {
            joints[3] = 1;
        }
        exo_config[0] =   parseInt(joints.join(""), 2);
        exo_config[1] = 20; // Move to the start position.
        exo_config[2] = parseInt(config.steps);
        exo_config[3] = parseInt(config.gait_velocity);
        exo_config[4] = parseInt(config.rom);
        exo_config[5] = parseInt(config.leg_length);
        // Send data to the robot
        (async () => {
            await new Promise(resolve => setTimeout(resolve, 50));        
        })();
        sendUDP(trac_config, TRACTION_PORT, CPWALKER_IP);
        (async () => {
            await new Promise(resolve => setTimeout(resolve, 50));        
        })();
        sendUDP(weight_conf, WEIGHT_PORT, CPWALKER_IP);
        (async () => {
            await new Promise(resolve => setTimeout(resolve, 50));        
        })();
        sendUDP(exo_config, EXO_PORT, CPWALKER_IP);
        (async () => {
            await new Promise(resolve => setTimeout(resolve, 50));        
        })();
    });
}

function startTherapy() {
    // Traction control variabels
    var trac_config = [];
    var cmd_start;
    var cmd_v_r;
    var cmd_v_l;
    var cmd_traction_mode;
    // Exo control variabels
    var exo_config = [];
    var trajectory_ctr;
    var impedance_ctr;
    // Impedance variables
    var imp_config = [];
    var cal_imp;
    var niv_imp;
    var check_gauges;
    var weight_ref;
    // Read therappy settings from config file.    
    fs.readFile('/home/pi/CPWalker/cpwalker-interface/config/therapySettings.json', (err, data) => {
    //fs.readFile('config/therapySettings.json', (err, data) => {
        if (err) throw err;
        // Get json object
        let config = JSON.parse(data);
        // Check type of therapy (trajectory control, impedance control)
        if (data.right_hip_config == "t_control" || data.left_hip_config == "t_control"
            || data.right_knee_config == "t_control" || data.left_knee_config == "t_control") {
            trajectory_ctr = true;
        } else {
            impedance_ctr = true;
        }
        // TRAJECTORY CONTROL
        if (config.control_mode == "trajectory") {
            console.log("Trajectory Control");
            // Traction control config and initial position
            cmd_start = 0; // Exoskeleton does not go to initial position
            cmd_v_r = 50; // Velocity of right wheel 0 
            cmd_v_l = 50; // Velocity of left wheel 0
            cmd_traction_mode = 20;
            trac_config = [cmd_start, cmd_v_l, cmd_v_r, cmd_traction_mode];
            // Impedance config
            cal_imp = 1;
            niv_imp = 0;
            check_gauges = 0;
            weight_ref = 0;
            imp_config = [cal_imp, niv_imp, check_gauges, weight_ref];
            // Exoskeleton config trajectory control mode.
            exo_config = [0,0,0,0,0,0,0,0];
            // Encode selected joints.
            var joints = [0,0,0,0]
            if (config.right_hip_config == "enable") {
                joints[0] = 1;
            }
            if (config.left_hip_config == "enable") {
                joints[1] = 1;
            }
            if (config.right_knee_config == "enable") {
                joints[2] = 1;
            }
            if (config.left_knee_config == "enable") {
                joints[3] = 1;
            }
            exo_config[0] =   parseInt(joints.join(""), 2);
            exo_config[1] = 4; // Start motion in position control mode
            exo_config[2] = parseInt(config.steps);
            exo_config[3] = parseInt(config.gait_velocity);
            exo_config[4] = parseInt(config.rom);
            exo_config[5] = parseInt(config.leg_length);
        // IMPEDANCE CONTROL
        } else {
            console.log("Impedance Control");
            // Traction control config and initial position
            cmd_start = 0; // Exoskeleton does not go to initial position
            cmd_v_r = 50; // Velocity of right wheel 0 
            cmd_v_l = 50; // Velocity of left wheel 0
            cmd_traction_mode = 20; // Traction in "Auto" mode
            trac_config = [cmd_start, cmd_v_l, cmd_v_r, cmd_traction_mode];
            // Impedance config
            cal_imp = 1;
            if (config.control_mode == "h_impedance") {niv_imp = 3;}
            else if (config.control_mode == "m_impedance") {niv_imp = 2;}
            else if (config.control_mode == "l_impedance") {niv_imp = 1;} 
            else { niv_imp = 0;}
            check_gauges = 0;
            weight_ref = 0;
            imp_config = [cal_imp, niv_imp, check_gauges, weight_ref];
            // Exoskeleton config impedance control mode.
            exo_config = [0,0,0,0,0,0,0,0];
            // Encode selected joints.
            var joints = [0,0,0,0]
            if (config.right_hip_config == "enable") {
                joints[0] = 1;
            }
            if (config.left_hip_config == "enable") {
                joints[1] = 1;
            }
            if (config.right_knee_config == "enable") {
                joints[2] = 1;
            }
            if (config.left_knee_config == "enable") {
                joints[3] = 1;
            }
            exo_config[1] = 10; // Start motion in impedance control mode
            exo_config[2] = parseInt(config.steps);
            exo_config[3] = parseInt(config.gait_velocity);
            exo_config[4] = parseInt(config.rom);
            exo_config[5] = parseInt(config.leg_length);
        }
        // Send data to the robot
        (async () => {
            await new Promise(resolve => setTimeout(resolve, 50));        
        })();
        sendUDP(trac_config, TRACTION_PORT, CPWALKER_IP);
        (async () => {
            await new Promise(resolve => setTimeout(resolve, 50));        
        })();
        sendUDP(imp_config, IMPEDANCE_PORT, CPWALKER_IP);
        (async () => {
            await new Promise(resolve => setTimeout(resolve, 50));        
        })();
        sendUDP(exo_config, EXO_PORT, CPWALKER_IP);
        (async () => {
            await new Promise(resolve => setTimeout(resolve, 50));        
        })();
    });
}

// Stop therapy.  
function stopTherapy() {
    console.log("Stop Therapy");
    // Traction control variabels
    var trac_config = [];
    var cmd_start;
    var cmd_v_r;
    var cmd_v_l;
    var cmd_traction_mode;
    // Exo control variabels
    var exo_config = [];
    // Exoskeleton config and move to initial position.
    exo_config = [0,0,0,0,0,0,0,0];
    // Traction control config and initial position
    cmd_start = 0; // Exoskeleton does not go to initial position
    cmd_v_r = 50; // Velocity of right wheel 0 
    cmd_v_l = 50; // Velocity of left wheel 0
    cmd_traction_mode = 0; // Stop traction
    trac_config = [cmd_start, cmd_v_l, cmd_v_r, cmd_traction_mode];
    // Send data
    (async () => {
        await new Promise(resolve => setTimeout(resolve, 50));        
    })();
    sendUDP(trac_config, TRACTION_PORT, CPWALKER_IP);
    (async () => {
        await new Promise(resolve => setTimeout(resolve, 50));        
    })();
    sendUDP(exo_config, EXO_PORT, CPWALKER_IP);
    (async () => {
        await new Promise(resolve => setTimeout(resolve, 50));        
    })();
}

function stopExo() {
    // Exo control variabels
    var exo_config = [];
   // Exoskeleton config and move to initial position.
   exo_config = [0,0,0,0,0,0,0,0];
   // Send data   
   sendUDP(exo_config, EXO_PORT, CPWALKER_IP);
   (async () => {
    await new Promise(resolve => setTimeout(resolve, 50));        
    })();
}

// Sends COMMAND(array of numbers) to a PORT(int) of a specific IP(string)
function sendUDP(COMMAND, PORT, IP) {
    // Transform COMMAND to hexadecimal
    var COMMAND_HEX = [];
    if (COMMAND.length > 1) {
        for (let index = 0; index < COMMAND.length; index++) {
            if (COMMAND[index] < 16) {
                COMMAND_HEX[index] = (0).toString(16) + (COMMAND[index]).toString(16);            
            } else {
                COMMAND_HEX[index] = (COMMAND[index]).toString(16);
            }
        }
        var msg = Buffer.from(COMMAND_HEX.join(''),'hex');
    } else {
        if (COMMAND < 16) {
            COMMAND_HEX = (0).toString(16) + (COMMAND[index]).toString(16);            
        } else {
            COMMAND_HEX = (COMMAND).toString(16);
        }
        var msg = Buffer.from(COMMAND_HEX,'hex');
    }

    udp_send.send(msg, PORT, IP);
    console.log(`PORT:` + PORT + '; COMMAND: ' + COMMAND + '; COMMAND_HEX: ' + COMMAND_HEX); 
}

// Decode joint real and reference angle values. Get the coded_value and returns an array 
// with the real and reference angles  
function decodeRealRef(coded_values) {
    // Receive data of the reference and real position of the left knee:
    var sign_real_pos;
    var interger_real_pos;
    var decimals_1_real_pos; // No es necesario ya que los decimales nunca son mayores que 256
    var decimals_2_real_pos;
    var sign_ref_pos;
    var interger_ref_pos;
    var decimals_1_ref_pos; // No es necesario ya que los decimales nunca son mayores que 256
    var decimals_2_ref_pos;
    var codified_values = []; // Contains codified values 
    // Transform the coded_number of type string to an hex number array 
    for (i = 0 ; i < String(coded_values).length; i++) {
        codified_values.push(String(coded_values).charCodeAt(i));
    }
    // Decode values:
    // Sign:  0 = positive number, 1 = negative number
    if (codified_values[0] == 0) {
        sign_real_pos = 1;
    } else {
        sign_real_pos = -1;
    }
    if (codified_values[4] == 0) {
        sign_ref_pos = 1;
    } else {
        sign_ref_pos = -1;
    }
    // Interger values:
    interger_real_pos = codified_values[1];
    interger_ref_pos =  codified_values[5];
    // Decimals values:
    decimals_2_real_pos = codified_values[3];
    decimals_2_ref_pos =  codified_values[7];
    
    return [ sign_real_pos * (interger_real_pos + decimals_2_real_pos/100) , sign_ref_pos * (interger_ref_pos + decimals_2_ref_pos/100) ]
}
